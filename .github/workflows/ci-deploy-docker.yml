name: Build & Deploy Docker to EC2

on:
  push:
    branches: [ main ]

jobs:
  build_and_push:
    name: Build and push image to GHCR
    runs-on: ubuntu-latest
    outputs:
      owner_lc: ${{ steps.owner.outputs.lc }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute lowercase owner
        id: owner
        run: echo "lc=${OWNER,,}" >> "$GITHUB_OUTPUT"
        env:
          OWNER: ${{ github.repository_owner }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: server/Dockerfile
          push: true
          tags: ghcr.io/${{ needs.build_and_push.outputs.owner_lc }}/fgsm-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_to_ec2:
    name: Trigger remote deploy (pull & restart) on EC2
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Prepare deploy script on runner
        run: |
          cat > deploy_remote.sh <<'SCRIPT'
          #!/usr/bin/env bash
          set -euo pipefail
          docker --version || { echo "docker not installed on host"; exit 1; }

          echo "Logging in to ghcr..."
          echo "${GHCR_PAT_SECRET}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin

          echo "Pulling image ghcr.io/${GHCR_USER}/fgsm-server:latest"
          docker pull ghcr.io/${GHCR_USER}/fgsm-server:latest

          echo "Restarting container..."
          docker rm -f fgsm-server || true
          docker run -d --name fgsm-server \
            --restart unless-stopped \
            -p 8000:8000 \
            ghcr.io/${GHCR_USER}/fgsm-server:latest
          SCRIPT
          chmod +x deploy_remote.sh

      - name: Create deploy dir on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/${{ secrets.EC2_USER }}/deploy

      - name: Copy deploy script to EC2 via SCP
        uses: appleboy/scp-action@v0.1.14
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy_remote.sh"
          target: "/home/${{ secrets.EC2_USER }}/deploy/"

      - name: Execute deploy script on EC2
        uses: appleboy/ssh-action@v0.1.8
        env:
          GHCR_PAT_SECRET: ${{ secrets.GHCR_PAT }}
          GHCR_USER: ${{ needs.build_and_push.outputs.owner_lc }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: GHCR_PAT_SECRET,GHCR_USER
          script: |
            set -euo pipefail
            cd /home/${{ secrets.EC2_USER }}/deploy
            chmod +x deploy_remote.sh
            ./deploy_remote.sh
